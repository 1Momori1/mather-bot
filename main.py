import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from db import init_db, get_bots, add_bot, update_bot_status, delete_bot, get_bot_stats, backup_database, get_recent_activity, get_bot_by_id
from process_manager import start_bot, stop_bot, restart_bot
from logger import log_action, log_error, log_system, log_bot_status
from system_info import format_system_info, get_uptime
import config
import os

# API_TOKEN —Ç–µ–ø–µ—Ä—å –≤ config.py

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ ---
class AddBotStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_script_path = State()
    waiting_for_token = State()

# --- FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è ---
class DeleteBotStates(StatesGroup):
    waiting_for_confirmation = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="ü§ñ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="add_bot")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    builder.button(text="üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞", callback_data="system")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤", callback_data="list_bots")
    builder.button(text="üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", callback_data="backup")
    builder.adjust(2)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º ---
def get_bot_control_keyboard(bot_id, status):
    builder = InlineKeyboardBuilder()
    if status == 'stopped':
        builder.button(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"start_{bot_id}")
    else:
        builder.button(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_{bot_id}")
        builder.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_{bot_id}")
    
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{bot_id}")
    builder.button(text="üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"info_{bot_id}")
    builder.adjust(2)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã ---
def get_cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è ---
def get_confirm_delete_keyboard(bot_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{bot_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    builder.adjust(2)
    return builder.as_markup()

async def show_bots_menu(message):
    bots = await get_bots()
    if not bots:
        await message.answer('ü§ñ –ë–æ—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.', reply_markup=get_main_menu())
        return
    
    await message.answer('üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:**')
    for bot_data in bots:
        bot_id, name, script_path, token, status, created_at, last_started, start_count = bot_data
        text = f"""
ü§ñ **{name}**
üìÅ –ü—É—Ç—å: `{script_path}`
üìä –°—Ç–∞—Ç—É—Å: **{status}**
üìÖ –°–æ–∑–¥–∞–Ω: {created_at}
üöÄ –ó–∞–ø—É—Å–∫–æ–≤: {start_count}
"""
        if last_started:
            text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_started}"
        
        await message.answer(text, reply_markup=get_bot_control_keyboard(bot_id, status), parse_mode='Markdown')
    
    await message.answer('üéõÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:**', reply_markup=get_main_menu(), parse_mode='Markdown')

async def show_stats(message):
    stats = await get_bot_stats()
    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤:**

ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: **{stats['total_bots']}**
‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–æ: **{stats['running_bots']}**
‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{stats['stopped_bots']}**
"""
    
    if stats['most_active']:
        name, count = stats['most_active']
        text += f"üèÜ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: **{name}** ({count} –∑–∞–ø—É—Å–∫–æ–≤)"
    
    await message.answer(text, reply_markup=get_main_menu(), parse_mode='Markdown')

async def show_system_info(message):
    system_info = format_system_info()
    uptime = get_uptime()
    
    text = f"{system_info}\n‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: **{uptime}**"
    
    await message.answer(text, reply_markup=get_main_menu(), parse_mode='Markdown')

async def show_bot_info(bot_id, message):
    bot_data = await get_bot_by_id(bot_id)
    if not bot_data:
        await message.answer('‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    bot_id, name, script_path, token, status, created_at, last_started, start_count = bot_data
    
    text = f"""
ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**

üìù **–ò–º—è:** {name}
üìÅ **–ü—É—Ç—å:** `{script_path}`
üìä **–°—Ç–∞—Ç—É—Å:** {status}
üìÖ **–°–æ–∑–¥–∞–Ω:** {created_at}
üöÄ **–ó–∞–ø—É—Å–∫–æ–≤:** {start_count}
"""
    
    if last_started:
        text += f"‚è∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:** {last_started}"
    
    if token:
        text += f"\nüîë **–¢–æ–∫–µ–Ω:** `{token[:10]}...`"
    
    await message.answer(text, reply_markup=get_main_menu(), parse_mode='Markdown')

@dp.message()
async def cmd_start(message: types.Message):
    if message.text == '/start':
        log_action("start", f"User {message.from_user.id} started bot")
        await show_bots_menu(message)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_query.data –Ω–µ None
    if not callback_query.data:
        return
    
    if callback_query.data == 'add_bot':
        log_action("add_bot", f"User {callback_query.from_user.id} started adding bot")
        await state.set_state(AddBotStates.waiting_for_name)
        await bot.send_message(
            callback_query.from_user.id, 
            'üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:',
            reply_markup=get_cancel_keyboard()
        )
    
    elif callback_query.data == 'stats':
        log_action("stats", f"User {callback_query.from_user.id} requested stats")
        await show_stats(callback_query.message)
    
    elif callback_query.data == 'system':
        log_action("system", f"User {callback_query.from_user.id} requested system info")
        await show_system_info(callback_query.message)
    
    elif callback_query.data == 'list_bots':
        log_action("list_bots", f"User {callback_query.from_user.id} requested bot list")
        await show_bots_menu(callback_query.message)
    
    elif callback_query.data == 'backup':
        log_action("backup", f"User {callback_query.from_user.id} requested backup")
        backup_path = await backup_database()
        if backup_path:
            await bot.send_message(callback_query.from_user.id, f'‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: `{backup_path}`', parse_mode='Markdown')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    
    elif callback_query.data == 'cancel_add':
        await state.clear()
        await bot.send_message(callback_query.from_user.id, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    
    elif callback_query.data.startswith('start_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–æ—Ç–∞')
            return
            
        bots = await get_bots()
        target_bot = None
        for b in bots:
            if b[0] == bot_id:
                target_bot = b
                break
        
        if target_bot:
            log_bot_status(target_bot[1], "start_attempt", f"User {callback_query.from_user.id}")
            success = await start_bot(bot_id, target_bot[2])
            if success:
                await update_bot_status(bot_id, 'running')
                log_bot_status(target_bot[1], "started", "success")
                await bot.send_message(callback_query.from_user.id, f'‚úÖ –ë–æ—Ç "{target_bot[1]}" –∑–∞–ø—É—â–µ–Ω!')
            else:
                log_bot_status(target_bot[1], "start_failed", "error")
                await bot.send_message(callback_query.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ "{target_bot[1]}"')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('stop_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–æ—Ç–∞')
            return
            
        bots = await get_bots()
        target_bot = None
        for b in bots:
            if b[0] == bot_id:
                target_bot = b
                break
        
        if target_bot:
            log_bot_status(target_bot[1], "stop_attempt", f"User {callback_query.from_user.id}")
            success = await stop_bot(bot_id)
            if success:
                await update_bot_status(bot_id, 'stopped')
                log_bot_status(target_bot[1], "stopped", "success")
                await bot.send_message(callback_query.from_user.id, f'‚èπÔ∏è –ë–æ—Ç "{target_bot[1]}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            else:
                log_bot_status(target_bot[1], "stop_failed", "error")
                await bot.send_message(callback_query.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ "{target_bot[1]}"')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('restart_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–æ—Ç–∞')
            return
            
        bots = await get_bots()
        target_bot = None
        for b in bots:
            if b[0] == bot_id:
                target_bot = b
                break
        
        if target_bot:
            log_bot_status(target_bot[1], "restart_attempt", f"User {callback_query.from_user.id}")
            success = await restart_bot(bot_id, target_bot[2])
            if success:
                await update_bot_status(bot_id, 'running')
                log_bot_status(target_bot[1], "restarted", "success")
                await bot.send_message(callback_query.from_user.id, f'üîÑ –ë–æ—Ç "{target_bot[1]}" –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!')
            else:
                log_bot_status(target_bot[1], "restart_failed", "error")
                await bot.send_message(callback_query.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ "{target_bot[1]}"')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('delete_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–æ—Ç–∞')
            return
        
        bot_data = await get_bot_by_id(bot_id)
        if bot_data:
            await state.set_state(DeleteBotStates.waiting_for_confirmation)
            await state.update_data(bot_id=bot_id, bot_name=bot_data[1])
            await bot.send_message(
                callback_query.from_user.id,
                f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ "{bot_data[1]}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
                reply_markup=get_confirm_delete_keyboard(bot_id)
            )
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('confirm_delete_'):
        try:
            bot_id = int(callback_query.data.split('_')[2])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–æ—Ç–∞')
            return
        
        data = await state.get_data()
        bot_name = data.get('bot_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç')
        
        await delete_bot(bot_id)
        log_action("delete_bot", f"User {callback_query.from_user.id} deleted bot {bot_name}")
        await bot.send_message(callback_query.from_user.id, f'üóëÔ∏è –ë–æ—Ç "{bot_name}" —É–¥–∞–ª–µ–Ω!')
        await state.clear()
    
    elif callback_query.data == 'cancel_delete':
        await state.clear()
        await bot.send_message(callback_query.from_user.id, '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    
    elif callback_query.data.startswith('info_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –±–æ—Ç–∞')
            return
        
        await show_bot_info(bot_id, callback_query.message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ ---
@dp.message(AddBotStates.waiting_for_name)
async def process_bot_name(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
        
    await state.update_data(name=message.text)
    await state.set_state(AddBotStates.waiting_for_script_path)
    await message.answer(
        'üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: C:\\bots\\my_bot.py):',
        reply_markup=get_cancel_keyboard()
    )

@dp.message(AddBotStates.waiting_for_script_path)
async def process_script_path(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
        
    script_path = message.text.strip()
    
    if not os.path.exists(script_path):
        await message.answer(
            '‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(script_path=script_path)
    await state.set_state(AddBotStates.waiting_for_token)
    await message.answer(
        'üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω):',
        reply_markup=get_cancel_keyboard()
    )

@dp.message(AddBotStates.waiting_for_token)
async def process_token(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
        
    token = message.text.strip()
    if token.lower() == '–Ω–µ—Ç':
        token = None
    
    data = await state.get_data()
    name = data.get('name')
    script_path = data.get('script_path')
    
    if not name or not script_path:
        await message.answer('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        await state.clear()
        return
    
    try:
        await add_bot(name, script_path, token)
        log_action("bot_added", f"User {message.from_user.id} added bot {name}")
        await message.answer(f'‚úÖ –ë–æ—Ç "{name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=get_main_menu())
    except Exception as e:
        log_error("add_bot_failed", f"User {message.from_user.id}, bot {name}: {str(e)}")
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {str(e)}', reply_markup=get_main_menu())
    
    await state.clear()

async def main():
    log_system("Bot starting...")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    log_system("Database initialized")
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    log_system("Bot ready for work")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 