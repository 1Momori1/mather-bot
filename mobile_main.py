#!/usr/bin/env python3
"""
–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Mather Bot
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Android —á–µ—Ä–µ–∑ Termux
"""

import asyncio
import os
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from db import init_db, get_bots, add_bot, update_bot_status, delete_bot, get_bot_stats
from process_manager import start_bot, stop_bot, restart_bot
from logger import log_action, log_error, log_system, log_bot_status
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
MOBILE_MODE = True
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ ---
class AddBotStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_script_path = State()
    waiting_for_token = State()

# --- FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è ---
class DeleteBotStates(StatesGroup):
    waiting_for_confirmation = State()

# --- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö ---
def get_mobile_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_bot")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫", callback_data="list_bots")
    builder.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart_all")
    builder.adjust(2)
    return builder.as_markup()

def get_bot_mobile_keyboard(bot_id, status):
    builder = InlineKeyboardBuilder()
    if status == 'stopped':
        builder.button(text="‚ñ∂Ô∏è", callback_data=f"start_{bot_id}")
    else:
        builder.button(text="‚èπÔ∏è", callback_data=f"stop_{bot_id}")
        builder.button(text="üîÑ", callback_data=f"restart_{bot_id}")
    
    builder.button(text="üóëÔ∏è", callback_data=f"delete_{bot_id}")
    builder.adjust(3)
    return builder.as_markup()

def get_cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")
    return builder.as_markup()

def get_confirm_delete_keyboard(bot_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞", callback_data=f"confirm_delete_{bot_id}")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
    builder.adjust(2)
    return builder.as_markup()

async def show_mobile_bots_list(message):
    bots = await get_bots()
    if not bots:
        await message.answer('ü§ñ –ë–æ—Ç–æ–≤ –Ω–µ—Ç', reply_markup=get_mobile_menu())
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–æ—Ç—ã (–ø–µ—Ä–≤—ã–µ 5)
    for i, bot_data in enumerate(bots[:5]):
        bot_id, name, script_path, token, status, created_at, last_started, start_count = bot_data
        text = f"ü§ñ **{name}**\nüìä {status} | üöÄ {start_count}"
        
        await message.answer(text, reply_markup=get_bot_mobile_keyboard(bot_id, status), parse_mode='Markdown')
    
    if len(bots) > 5:
        await message.answer(f"üìã –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(bots)} –±–æ—Ç–æ–≤", reply_markup=get_mobile_menu())
    else:
        await message.answer("üì± –ú–µ–Ω—é:", reply_markup=get_mobile_menu())

async def show_mobile_stats(message):
    stats = await get_bot_stats()
    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
ü§ñ –í—Å–µ–≥–æ: {stats['total_bots']}
‚ñ∂Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç: {stats['running_bots']}
‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {stats['stopped_bots']}
"""
    
    if stats['most_active']:
        name, count = stats['most_active']
        text += f"üèÜ {name}: {count} –∑–∞–ø—É—Å–∫–æ–≤"
    
    await message.answer(text, reply_markup=get_mobile_menu(), parse_mode='Markdown')

async def restart_all_bots(message):
    bots = await get_bots()
    if not bots:
        await message.answer('ü§ñ –ë–æ—Ç–æ–≤ –Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞', reply_markup=get_mobile_menu())
        return
    
    await message.answer('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤...')
    
    success_count = 0
    for bot_data in bots:
        bot_id, name, script_path, token, status, created_at, last_started, start_count = bot_data
        try:
            success = await restart_bot(bot_id, script_path)
            if success:
                await update_bot_status(bot_id, 'running')
                success_count += 1
        except Exception as e:
            log_error(f"restart_all_failed", f"Bot {name}: {str(e)}")
    
    await message.answer(f'‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ {success_count} –∏–∑ {len(bots)} –±–æ—Ç–æ–≤', reply_markup=get_mobile_menu())

@dp.message()
async def cmd_start(message: types.Message):
    if message.text == '/start':
        log_action("mobile_start", f"User {message.from_user.id} started mobile bot")
        await message.answer('üì± **Mather Bot Mobile**\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞', parse_mode='Markdown')
        await show_mobile_bots_list(message)

@dp.callback_query()
async def process_mobile_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    if not callback_query.data:
        return
    
    if callback_query.data == 'add_bot':
        log_action("mobile_add_bot", f"User {callback_query.from_user.id}")
        await state.set_state(AddBotStates.waiting_for_name)
        await bot.send_message(
            callback_query.from_user.id, 
            'üìù –ò–º—è –±–æ—Ç–∞:',
            reply_markup=get_cancel_keyboard()
        )
    
    elif callback_query.data == 'stats':
        log_action("mobile_stats", f"User {callback_query.from_user.id}")
        await show_mobile_stats(callback_query.message)
    
    elif callback_query.data == 'list_bots':
        log_action("mobile_list", f"User {callback_query.from_user.id}")
        await show_mobile_bots_list(callback_query.message)
    
    elif callback_query.data == 'restart_all':
        log_action("mobile_restart_all", f"User {callback_query.from_user.id}")
        await restart_all_bots(callback_query.message)
    
    elif callback_query.data == 'cancel_add':
        await state.clear()
        await bot.send_message(callback_query.from_user.id, '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')
    
    elif callback_query.data.startswith('start_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞')
            return
            
        bots = await get_bots()
        target_bot = None
        for b in bots:
            if b[0] == bot_id:
                target_bot = b
                break
        
        if target_bot:
            log_bot_status(target_bot[1], "mobile_start", f"User {callback_query.from_user.id}")
            success = await start_bot(bot_id, target_bot[2])
            if success:
                await update_bot_status(bot_id, 'running')
                await bot.send_message(callback_query.from_user.id, f'‚úÖ {target_bot[1]} –∑–∞–ø—É—â–µ–Ω')
            else:
                await bot.send_message(callback_query.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {target_bot[1]}')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('stop_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞')
            return
            
        bots = await get_bots()
        target_bot = None
        for b in bots:
            if b[0] == bot_id:
                target_bot = b
                break
        
        if target_bot:
            log_bot_status(target_bot[1], "mobile_stop", f"User {callback_query.from_user.id}")
            success = await stop_bot(bot_id)
            if success:
                await update_bot_status(bot_id, 'stopped')
                await bot.send_message(callback_query.from_user.id, f'‚èπÔ∏è {target_bot[1]} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            else:
                await bot.send_message(callback_query.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {target_bot[1]}')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('restart_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞')
            return
            
        bots = await get_bots()
        target_bot = None
        for b in bots:
            if b[0] == bot_id:
                target_bot = b
                break
        
        if target_bot:
            log_bot_status(target_bot[1], "mobile_restart", f"User {callback_query.from_user.id}")
            success = await restart_bot(bot_id, target_bot[2])
            if success:
                await update_bot_status(bot_id, 'running')
                await bot.send_message(callback_query.from_user.id, f'üîÑ {target_bot[1]} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω')
            else:
                await bot.send_message(callback_query.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {target_bot[1]}')
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('delete_'):
        try:
            bot_id = int(callback_query.data.split('_')[1])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞')
            return
        
        bot_data = await get_bot_by_id(bot_id)
        if bot_data:
            await state.set_state(DeleteBotStates.waiting_for_confirmation)
            await state.update_data(bot_id=bot_id, bot_name=bot_data[1])
            await bot.send_message(
                callback_query.from_user.id,
                f'‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å "{bot_data[1]}"?',
                reply_markup=get_confirm_delete_keyboard(bot_id)
            )
        else:
            await bot.send_message(callback_query.from_user.id, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    elif callback_query.data.startswith('confirm_delete_'):
        try:
            bot_id = int(callback_query.data.split('_')[2])
        except (ValueError, IndexError):
            await bot.send_message(callback_query.from_user.id, '‚ùå –û—à–∏–±–∫–∞')
            return
        
        data = await state.get_data()
        bot_name = data.get('bot_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        await delete_bot(bot_id)
        log_action("mobile_delete", f"User {callback_query.from_user.id} deleted {bot_name}")
        await bot.send_message(callback_query.from_user.id, f'üóëÔ∏è {bot_name} —É–¥–∞–ª–µ–Ω')
        await state.clear()
    
    elif callback_query.data == 'cancel_delete':
        await state.clear()
        await bot.send_message(callback_query.from_user.id, '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ ---
@dp.message(AddBotStates.waiting_for_name)
async def process_mobile_bot_name(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return
        
    await state.update_data(name=message.text)
    await state.set_state(AddBotStates.waiting_for_script_path)
    await message.answer('üìÅ –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É:', reply_markup=get_cancel_keyboard())

@dp.message(AddBotStates.waiting_for_script_path)
async def process_mobile_script_path(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return
        
    script_path = message.text.strip()
    
    if not os.path.exists(script_path):
        await message.answer('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!', reply_markup=get_cancel_keyboard())
        return
    
    await state.update_data(script_path=script_path)
    await state.set_state(AddBotStates.waiting_for_token)
    await message.answer('üîë –¢–æ–∫–µ–Ω (–∏–ª–∏ "–Ω–µ—Ç"):', reply_markup=get_cancel_keyboard())

@dp.message(AddBotStates.waiting_for_token)
async def process_mobile_token(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        return
        
    token = message.text.strip()
    if token.lower() == '–Ω–µ—Ç':
        token = None
    
    data = await state.get_data()
    name = data.get('name')
    script_path = data.get('script_path')
    
    if not name or not script_path:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
        await state.clear()
        return
    
    try:
        await add_bot(name, script_path, token)
        log_action("mobile_bot_added", f"User {message.from_user.id} added {name}")
        await message.answer(f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=get_mobile_menu())
    except Exception as e:
        log_error("mobile_add_failed", f"User {message.from_user.id}, {name}: {str(e)}")
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}', reply_markup=get_mobile_menu())
    
    await state.clear()

async def main():
    log_system("Mobile bot starting...")
    print("üì± –ú–æ–±–∏–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs('logs', exist_ok=True)
    os.makedirs('backups', exist_ok=True)
    
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    log_system("Mobile database ready")
    
    print("üöÄ –ú–æ–±–∏–ª—å–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤!")
    log_system("Mobile bot ready")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
    await dp.start_polling(bot, polling_timeout=CHECK_INTERVAL)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüì± –ú–æ–±–∏–ª—å–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        log_system("Mobile bot stopped by user")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        log_error("mobile_crash", str(e)) 